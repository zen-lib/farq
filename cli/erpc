#!/usr/bin/env node

import easyRpc from '../dist/index.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory where the script is located
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Parse command line arguments
const args = process.argv.slice(2);
const initFlag = args.includes('--init');

if (initFlag) {
	// Handle initialization
	console.log('Initializing easy-rpc templates...');

	// Source templates directory (relative to the script location)
	const templatesSourceDir = path.resolve(__dirname, '../src/templates');

	// Destination directory (in the current working directory)
	const templatesDestDir = path.resolve(process.cwd(), 'src/templates');

	// Create destination directory if it doesn't exist
	if (!fs.existsSync(templatesDestDir)) {
		fs.mkdirSync(templatesDestDir, { recursive: true });
		console.log(`Created directory: ${templatesDestDir}`);
	}

	// Copy template files
	try {
		const files = fs.readdirSync(templatesSourceDir);

		for (const file of files) {
			const sourcePath = path.join(templatesSourceDir, file);
			const destPath = path.join(templatesDestDir, file);

			fs.copyFileSync(sourcePath, destPath);
			console.log(`Copied: ${file}`);
		}

		console.log('Templates initialized successfully!');
	} catch (err) {
		console.error('Error initializing templates:', err);
		process.exit(1);
	}
} else {
	// Original functionality
	const entryDir = args[0];
	easyRpc({ entryDir }).catch((err) => {
		console.error(err);
		process.exit(1);
	});
}
